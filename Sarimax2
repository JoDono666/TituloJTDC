import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Cargar el dataset
file_path = r"C:\Users\josen\OneDrive\Desktop\Tesis\Solo2024.xlsx"
df = pd.read_excel(file_path, sheet_name="Hoja1", engine="openpyxl")


df["FechaPartida"] = pd.to_datetime(df["FechaPartida"], errors='coerce')
df.dropna(subset=["FechaPartida"], inplace=True)

# Obtener el **promedio de los 3 viajes con mayor ocupación por día**
df_max_ocupacion = df.groupby("FechaPartida").agg({
    "Ocupacion": lambda x: x.nlargest(3).mean(),
    "IPC General": "mean",
    "Kms": "mean",
    "Feriados": "max"  # Dummy variable (1 si es feriado, 0 si no)
}).reset_index()

# Transformación logarítmica para estabilizar la varianza
df_max_ocupacion["Ocup_MA"] = np.log1p(df_max_ocupacion["Ocupacion"])

# Suavizado con media móvil (reducción de ruido)
df_max_ocupacion["Ocup_MA"] = df_max_ocupacion["Ocup_MA"].rolling(window=5, min_periods=1).mean()

# Seleccionar variables exógenas
exogenas = df_max_ocupacion[["IPC General", "Kms", "Feriados"]]

# Aplicar suavizado a las exógenas sin diferenciación para evitar pérdida de tendencia
exogenas = exogenas.rolling(window=5, min_periods=1).mean()

# División de datos en entrenamiento y prueba (85%-15%)
train_size = int(len(df_max_ocupacion) * 0.85)
train, test = df_max_ocupacion.iloc[:train_size], df_max_ocupacion.iloc[train_size:]
exog_train, exog_test = exogenas.iloc[:train_size], exogenas.iloc[train_size:]

# Parámetros SARIMAX Ajustados
p, d, q = 3, 1, 3  # Mejor rendimiento en pruebas
P, D, Q, s = 1, 1, 1, 7  # Captura la estacionalidad semanal

# Ajuste del modelo SARIMAX
modelo_sarimax = sm.tsa.statespace.SARIMAX(
    train["Ocup_MA"],
    exog=exog_train,  
    order=(p, d, q),
    seasonal_order=(P, D, Q, s),
    enforce_stationarity=False,
    enforce_invertibility=False
)
resultado_sarimax = modelo_sarimax.fit()

# Predicciones
predicciones = np.expm1(resultado_sarimax.predict(start=len(train), end=len(df_max_ocupacion)-1, exog=exog_test))

# Corrección de escala para ajustar mejor la predicción
factor_ajuste = test["Ocupacion"].mean() / predicciones.mean()
predicciones *= factor_ajuste

# Evaluación del modelo
rmse = np.sqrt(mean_squared_error(test["Ocupacion"], predicciones))
mae = mean_absolute_error(test["Ocupacion"], predicciones)
r2 = r2_score(test["Ocupacion"], predicciones)

# Gráfica de Resultados
plt.figure(figsize=(12, 6))
plt.plot(train["FechaPartida"], train["Ocupacion"], label="Entrenamiento", color="orange")
plt.plot(test["FechaPartida"], test["Ocupacion"], label="Real (Test)", color="red")
plt.plot(test["FechaPartida"], predicciones, label="Predicción SARIMAX", linestyle="dashed", color="green")
plt.legend()
plt.title("Modelo SARIMAX Optimizado - Predicción de Ocupación")
plt.xlabel("Fecha de Partida")
plt.ylabel("Ocupación")
plt.grid()
plt.show()

# Mostrar métricas finales
print("\n **Resultados del Modelo SARIMAX Mejorado**")
print(f" RMSE: {rmse:.4f}")
print(f" MAE: {mae:.4f}")
print(f" R² Score: {r2:.4f}")
