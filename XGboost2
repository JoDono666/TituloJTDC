import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Cargar el dataset
file_path = r"C:\Users\josen\OneDrive\Desktop\Tesis\Solo2024.xlsx"
df = pd.read_excel(file_path, sheet_name="Hoja1", engine="openpyxl")


df["FechaPartida"] = pd.to_datetime(df["FechaPartida"], errors='coerce')
df.dropna(subset=["FechaPartida"], inplace=True)


df_max_ocupacion = df.groupby("FechaPartida").agg({
    "Ocupacion": lambda x: x.nlargest(3).mean(),
    "Butacas": "mean",
    "Kms": "mean",
    "Tipo de Cambio de Referencia - en Pesos - por Dolar": "mean"
}).reset_index()

# Seleccionar variables de entrada y salida
X = df_max_ocupacion[["Butacas", "Kms", "Tipo de Cambio de Referencia - en Pesos - por Dolar"]]
y = df_max_ocupacion["Ocupacion"]

# Normalizar las variables para mejorar la precisión del modelo
scaler = MinMaxScaler(feature_range=(0, 1))
X_scaled = scaler.fit_transform(X)

# Dividir en conjuntos de entrenamiento y prueba (80% - 20%)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, shuffle=False)

# Entrenar Modelo XGBoost
modelo_xgb = XGBRegressor(n_estimators=200, learning_rate=0.05, max_depth=6)
modelo_xgb.fit(X_train, y_train)

# Hacer predicciones
y_pred_xgb = modelo_xgb.predict(X_test)

# Calcular métricas de error
rmse_xgb = np.sqrt(mean_squared_error(y_test, y_pred_xgb))
mae_xgb = mean_absolute_error(y_test, y_pred_xgb)
r2_xgb = r2_score(y_test, y_pred_xgb)

#  Mostrar métricas finales
print("\n Resultados del Modelo XGBoost")
print(f" RMSE: {rmse_xgb:.4f}")
print(f" MAE: {mae_xgb:.4f}")
print(f" R² Score: {r2_xgb:.4f}")

#  Graficar comparación entre valores reales y predicción
plt.figure(figsize=(12, 6))
plt.plot(df_max_ocupacion["FechaPartida"][-len(y_test):], y_test, label="Real (Ocupación)", color="red")
plt.plot(df_max_ocupacion["FechaPartida"][-len(y_test):], y_pred_xgb, label="Predicción XGBoost", linestyle="dashed", color="green")
plt.legend()
plt.title("Comparación de Modelo XGBoost vs Real")
plt.xlabel("Fecha de Partida")
plt.ylabel("Ocupación")
plt.grid()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(df_final["FechaPartida"][-len(y_test):], y_test, label="Real (Ocupación)", color="red")
plt.plot(df_final["FechaPartida"][-len(y_test):], y_pred_gbr, label="Predicción Gradient Boosting", linestyle="dashdot", color="purple")
plt.legend()
plt.title(" Modelo Gradient Boosting vs Datos Reales")
plt.xlabel("Fecha de Partida")
plt.ylabel("Ocupación")
plt.grid()
plt.show()
