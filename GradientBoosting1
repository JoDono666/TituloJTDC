import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score


file_path = "C:/Users/josen/OneDrive/Desktop/Tesis/data2022-2024ej.xlsx"
df = pd.read_excel(file_path, sheet_name='Hoja1')


df["FechaPartida"] = pd.to_datetime(df["FechaPartida"])
df["DiasDesdeInicio"] = (df["FechaPartida"] - df["FechaPartida"].min()).dt.days


variables_exogenas = ["IPC General", "Costo_KM", "Feriados", "DiasDesdeInicio"]
df_final = df.groupby("FechaPartida").agg({
    "Ocup": "sum",
    "IPC General": "mean",
    "Costo_KM": "mean",
    "Feriados": "max",
    "DiasDesdeInicio": "max"
}).reset_index()


scaler = MinMaxScaler()
df_final_scaled = df_final.copy()
df_final_scaled[["Ocup"] + variables_exogenas] = scaler.fit_transform(df_final[["Ocup"] + variables_exogenas])


X = df_final_scaled[variables_exogenas]
y = df_final_scaled["Ocup"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False, random_state=42)


modelo_gbr = GradientBoostingRegressor(
    n_estimators=500, learning_rate=0.05, max_depth=6, subsample=0.9,
    random_state=42
)
modelo_gbr.fit(X_train, y_train)


y_pred_gbr = modelo_gbr.predict(X_test)


rmse_gbr = np.sqrt(mean_squared_error(y_test, y_pred_gbr))
mae_gbr = mean_absolute_error(y_test, y_pred_gbr)
r2_gbr = r2_score(y_test, y_pred_gbr)

print("\n **Resultados del Modelo Gradient Boosting**")
print(f" RMSE: {rmse_gbr:.4f}")
print(f" MAE: {mae_gbr:.4f}")
print(f" R² Score: {r2_gbr:.4f}")


sns.set_style("whitegrid")

plt.figure(figsize=(12, 6))
plt.plot(df_final["FechaPartida"][-len(y_test):], y_test, label="Real (Ocupación)", color="red")
plt.plot(df_final["FechaPartida"][-len(y_test):], y_pred_gbr, label="Predicción Gradient Boosting", linestyle="dashdot", color="purple")
plt.legend()
plt.title(" Modelo Gradient Boosting vs Datos Reales")
plt.xlabel("Fecha de Partida")
plt.ylabel("Ocupación")
plt.grid()
plt.show()
