import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

# Definir la longitud de la secuencia temporal para la GRU
seq_length = 10 

# Función para crear secuencias de datos
def create_sequences(X, y, seq_length):
    Xs, ys = [], []
    for i in range(len(X) - seq_length):
        Xs.append(X[i : i + seq_length])
        ys.append(y[i + seq_length])
    return np.array(Xs), np.array(ys)

# Crear secuencias
X_seq, y_seq = create_sequences(X, y, seq_length)

# Dividir en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, shuffle=False)

# Construcción del modelo GRU
model = Sequential([
    GRU(64, return_sequences=True, input_shape=(seq_length, X_train.shape[2])),
    Dropout(0.2),
    GRU(32, return_sequences=False),
    Dropout(0.2),
    Dense(16, activation="relu"),
    Dense(1)
])

# Compilar el modelo
model.compile(optimizer="adam", loss="mse", metrics=["mae"])

# Entrenar el modelo
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=16, verbose=1)

# Evaluar el modelo en el conjunto de prueba
loss, mae = model.evaluate(X_test, y_test, verbose=1)

print(f"Pérdida (MSE): {loss:.4f}, Error Absoluto Medio (MAE): {mae:.4f}")

# Predecir valores en el conjunto de prueba
y_pred = model.predict(X_test)

# Calcular métricas de error del modelo GRU
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Graficar comparación entre valores reales y predicciones
plt.figure(figsize=(12, 6))
plt.plot(range(len(y_test)), y_test, label="Real (Ocupación)", color="red")
plt.plot(range(len(y_pred)), y_pred, label="Predicción GRU", linestyle="dashed", color="green")
plt.legend()
plt.title("Modelo GRU - Predicción de Ocupación")
plt.xlabel("Índice de Tiempo")
plt.ylabel("Ocupación")
plt.grid()
plt.show()

# Gráfico de Pérdida Durante el Entrenamiento
plt.figure(figsize=(8,5))
plt.plot(history.history['loss'], label='Train Loss', color='blue')
plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')
plt.legend()
plt.title(" Pérdida durante el Entrenamiento")
plt.xlabel("Épocas")
plt.ylabel("MSE")
plt.show()

# Mostrar métricas finales
print("\n Resultados del Modelo GRU")
print(f"RMSE: {rmse:.4f}")
print(f"MAE: {mae:.4f}")
print(f"R² Score: {r2:.4f}")
